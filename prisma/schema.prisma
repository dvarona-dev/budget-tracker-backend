// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model UserMember {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String       @unique
  User       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String       @db.ObjectId
  BudgetItem BudgetItem[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model User {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  username  String       @unique
  password  String
  members   UserMember[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum Period {
  fifteen
  thirty
}

model BudgetItem {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  description  String
  amount       Float
  Budget       Budget     @relation(fields: [budgetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  budgetId     String     @db.ObjectId
  userMember   UserMember @relation(fields: [UserMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserMemberId String     @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Budget {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  cutoff_start DateTime
  cutoff_end   DateTime
  payout_date  DateTime
  period       Period
  items        BudgetItem[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}
