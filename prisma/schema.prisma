// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum Period {
  fifteen
  thirty
}

model User {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  username  String       @unique
  password  String
  members   UserMember[]
  budgets   Budget[]
  Income    Income[]
  Expense   Expense[]
  Deduction Deduction[]
  Holiday   Holiday[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model UserMember {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  User        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String       @db.ObjectId
  budgetItems BudgetItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Budget {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  cutoff_start DateTime
  cutoff_end   DateTime
  payout_date  DateTime
  period       Period
  extraHours   Float
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @db.ObjectId
  items        BudgetItem[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model BudgetItem {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  description  String
  amount       Float
  isCompleted  Boolean    @default(false)
  Budget       Budget     @relation(fields: [budgetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  budgetId     String     @db.ObjectId
  UserMember   UserMember @relation(fields: [userMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userMemberId String     @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Income {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  hourRate          Float
  additionalIncomes AdditionalIncome[]
  user              User               @relation(fields: [userId], references: [id])
  userId            String             @db.ObjectId
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model AdditionalIncome {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  amount      Float
  Income      Income   @relation(fields: [incomeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  incomeId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  amount      Float
  period      Period
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Deduction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  amount      Float
  period      Period
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Holiday {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String   @unique
  date        DateTime @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
